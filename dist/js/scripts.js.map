{"version":3,"sources":["scripts.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","console","camelCase","camelcase","2","input","options","Array","isArray","preserveCamelCase","isLastCharUpper","_objectSpread","pascalCase","preserveConsecutiveUppercase","isLastCharLower","string","x","trim","isLastLastCharUpper","character","toLocaleUpperCase","locale","toLocaleLowerCase","test","slice","message","m1","toLowerCase","replace","charAt","_","p1","m","default"],"mappings":"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","file":"scripts.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\nconst { [\"log\"]: c } = console;\r\n\r\nc(\"hello world\");\r\n\r\nconst message = \"This is a really cool way of speeding up your development cycles!\"\r\n\r\nc(message);\r\n\r\nconst camelCase = require(\"camelcase\");\r\nconst testvar = 'Testing camelcase in javascript.';\r\n\r\nc(camelCase(testvar));\r\n\nc('Welcome to the second script.');\r\n\n},{\"camelcase\":2}],2:[function(require,module,exports){\n'use strict';\n\nconst preserveCamelCase = (string, locale) => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst character = string[i];\n\n\t\tif (isLastCharLower && /[\\p{Lu}]/u.test(character)) {\n\t\t\tstring = string.slice(0, i) + '-' + string.slice(i);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && /[\\p{Ll}]/u.test(character)) {\n\t\t\tstring = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = character.toLocaleLowerCase(locale) === character && character.toLocaleUpperCase(locale) !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = character.toLocaleUpperCase(locale) === character && character.toLocaleLowerCase(locale) !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst preserveConsecutiveUppercase = input => {\n\treturn input.replace(/^[\\p{Lu}](?![\\p{Lu}])/gu, m1 => m1.toLowerCase());\n};\n\nconst postProcess = (input, options) => {\n\treturn input.replace(/[_.\\- ]+([\\p{Alpha}\\p{N}_]|$)/gu, (_, p1) => p1.toLocaleUpperCase(options.locale))\n\t\t.replace(/\\d+([\\p{Alpha}\\p{N}_]|$)/gu, m => m.toLocaleUpperCase(options.locale));\n};\n\nconst camelCase = (input, options) => {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = {\n\t\tpascalCase: false,\n\t\tpreserveConsecutiveUppercase: false,\n\t\t...options\n\t};\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tif (input.length === 1) {\n\t\treturn options.pascalCase ? input.toLocaleUpperCase(options.locale) : input.toLocaleLowerCase(options.locale);\n\t}\n\n\tconst hasUpperCase = input !== input.toLocaleLowerCase(options.locale);\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input, options.locale);\n\t}\n\n\tinput = input.replace(/^[_.\\- ]+/, '');\n\n\tif (options.preserveConsecutiveUppercase) {\n\t\tinput = preserveConsecutiveUppercase(input);\n\t} else {\n\t\tinput = input.toLocaleLowerCase();\n\t}\n\n\tif (options.pascalCase) {\n\t\tinput = input.charAt(0).toLocaleUpperCase(options.locale) + input.slice(1);\n\t}\n\n\treturn postProcess(input, options);\n};\n\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;\n\n},{}]},{},[1]);\n"]}